package com.youtubeproject.Youtube.Clone.Service;

import java.io.IOException;
import java.util.UUID;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ResponseStatusException;

import lombok.RequiredArgsConstructor;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.ObjectCannedACL;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;

/**
 * Service class for handling file uploads to AWS S3.
 * <p>
 * This class provides methods to upload files to the S3 bucket using Amazon SDK.
 * Files are uploaded with public read access and are uniquely identified within the bucket.
 * </p>
 */
@Service
@RequiredArgsConstructor
public class AWSService implements FileService {
	
	/**
	 * The name of the S3 bucket where files will be uploaded.
	 */
	public static final String BUCKET_NAME = "youtubeclone-seclass-2024";
	
	/**
	 * The AWS S3 client for interacting with the Amazon S3 service.
	 */
	private final S3Client awsS3Client;

	/**
	 * Uploads a file to Amazon S3 and returns the file URL.
	 * <p>
	 * The file is uploaded with a unique key generated by appending a UUID to the original file's extension.
	 * It is stored with a public read access level. If the upload fails due to an IOException, 
	 * an HTTP 500 status is thrown.
	 * </p>
	 *
	 * @param file The {@link MultipartFile} to be uploaded.
	 * @return The URL of the uploaded file in the S3 bucket.
	 * @throws ResponseStatusException if an IOException occurs during file upload.
	 */
	@Override
	public String uploadFile(MultipartFile file) {
		var filenameExtension = StringUtils.getFilenameExtension(file.getOriginalFilename());
		var key = UUID.randomUUID().toString() + "." + filenameExtension;
		
		PutObjectRequest putObjectRequest = PutObjectRequest.builder()
				.bucket(BUCKET_NAME)
				.key(key)
				.acl(ObjectCannedACL.PUBLIC_READ) 
				.contentType(file.getContentType())
				.build();
		
		try {
			awsS3Client.putObject(putObjectRequest, RequestBody.fromInputStream(file.getInputStream(), file.getSize()));
	    } catch (IOException ioException) {
	    	throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "An exception occurred while uploading the file");
    	}
		
        return awsS3Client.utilities().getUrl(builder -> builder.bucket(BUCKET_NAME).key(key)).toExternalForm();
    
	}
}